#############################所有的tokens
++:Inc
--:Dec
+:Add
-:Sub
*:Star
/:Div
%:Mod
~:Bneg
!:Not
^:Xor
&:Band
(:Lpb
):Rpb
=:Assign
[:Lsb
]:Rsb
{:Lcb
}:Rcb
|:Bor,
;:Sem
":Dq,
':Sq
<,Lt
,:Comma
>,Gt
.,Dot
<=:Le
>=:Ge
!=:Ne
==:Eq
&&:Land
||:Lor
+=:Adds
-=:Subs,
*=:Muls
/=:Divs
%=:Mods
for:key_for
while:Key_While
if:key_if
else:key_else
switch:key_switch
case:key_case
default:key_default
continue:key_continue
break:key_break
return:key_return
asm:key_asm
void:key_void
byte:key_byte
hword:key_hword
word :key_word
unsigned:key_unsigned
struct:key_struct
#############################下面为c语言bnf子集
<program>   ::={<function_definition>|<declaration>}

<function_definition>   ::=<type_specifier> {"*"} <identifier> "(" [<parameter_list>] ")" <compound_statement>
<parameter_list>  ::= <parameter_declaration> { "," <parameter_declaration> }
<parameter_declaration> ::= <type_specifier> <declarator>
<declaration>     ::= <type_specifier> <init_declarator_list> ";"
<init_declarator_list> ::= <init_declarator> { "," <init_declarator> }
<init_declarator> ::= <declarator> [ "=" <initializer> ]
<declarator>      ::= {"*"} <direct_declarator>
<direct_declarator> ::= <identifier>
                      | "(" <declarator> ")"
                      | <direct_declarator> "[" <constant> "]"       # 定长数组
                      | <direct_declarator> "(" [<parameter_list>] ")" # 函数指针
<type_specifier>  ::= ["unsigned"] ( "void" | "byte" | "hword" | "word")
                     | "struct" <identifier> [ "{" <struct_declaration_list> "}" ]

<struct_declaration_list> ::= { <struct_declaration> ";" }
<struct_declaration> ::= <type_specifier> <struct_declarator_list>
<struct_declarator_list> ::= <declarator>  { "," <declarator>  }

<initializer>     ::= <assignment_expression>
                     | "{" [<initializer_list>] "}"
<initializer_list> ::= <initializer> { "," <initializer> }
<compound_statement> ::= "{" { <declaration> | <statement> } "}"
<statement>       ::= <expression_statement>
                     | <compound_statement>
                     | <selection_statement>
                     | <iteration_statement>
                     | <jump_statement>
<expression_statement> ::= [<expression>] ";"
<selection_statement> ::= "if" "(" <expression> ")" <statement> [ "else" <statement> ]
<iteration_statement> ::= "while" "(" <expression> ")" <statement>
                     | "do" <statement> "while" "(" <expression> ")" ";"
                     | "for" "(" [<declaration>|<expression>] ";" [<expression>] ";" [<expression>] ")" <statement>
<jump_statement>  ::= "continue" ";"
                     | "break" ";"
                     | "return" [<expression>] ";"
<expression>      ::= <assignment_expression> { "," <assignment_expression> }
<assignment_expression> ::= <conditional_expression>
                     | <unary_expression> <assignment_operator> <assignment_expression>